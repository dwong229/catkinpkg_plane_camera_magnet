cmake_minimum_required(VERSION 2.8.3)
project(plane_camera_magnet)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  image_transport
  message_runtime
  roscpp
  sensor_msgs
  std_msgs
  message_generation
  rospy
  cmake_modules
  tf
  visualization_msgs
)
find_package(OpenCV REQUIRED)
find_package(flycapture)
find_package(Boost REQUIRED COMPONENTS thread)
find_package(Eigen REQUIRED)
include_directories(${Eigen_INCLUDE_DIRS})

## Generate messages in the 'msg' folder
add_message_files(
   FILES
   xyPix.msg
   roboclawCmd.msg
   xyFiltered.msg
   PositionCommand.msg
 )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   sensor_msgs
   #std_msgs
 )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#   INCLUDE_DIRS include
#   LIBRARIES plane_camera_magnet
   CATKIN_DEPENDS message_runtime
   CATKIN_DEPENDS cv_bridge image_transport message_runtime roscpp sensor_msgs std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}	
  include
)

## Declare a cpp library
 add_library(plane_camera_magnet
#   src/${PROJECT_NAME}/plane_camera_magnet.cpp
   src/hw4_helpers.cpp
   src/filter.cpp
   src/trajectory.cpp
   src/currentcompute.cpp
 )
target_link_libraries(plane_camera_magnet ${OpenCV_LIBS} ${catkin_LIBRARIES})
## Declare a cpp executable
# add_executable(plane_camera_magnet_node src/plane_camera_magnet_node.cpp)

add_executable(track_rod src/track_rod.cpp)
target_link_libraries(track_rod
  ${catkin_LIBRARIES}
)

add_executable(track_rod_orient src/track_rod_orient.cpp)
target_link_libraries(track_rod_orient
  ${catkin_LIBRARIES}
)

#add_executable(track_circle src/track_circle.cpp)
#target_link_libraries(track_rod_orient
#  ${catkin_LIBRARIES}
#)

add_executable(cal_plane_coils src/cal_plane_coils.cpp)
target_link_libraries(cal_plane_coils
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(visualization_pixels src/visualization_pixels.cpp)
target_link_libraries(visualization_pixels
  ${catkin_LIBRARIES}
)

add_executable(eigensandbox src/eigensandbox.cpp)
target_link_libraries(eigensandbox
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(filterpose src/filterpose.cpp)
target_link_libraries(filterpose
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(visualization_filtered src/visualization_filtered.cpp)
target_link_libraries(visualization_filtered
  ${catkin_LIBRARIES}
)

add_executable(kf_pose src/kf_pose.cpp)
target_link_libraries(kf_pose
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(check_cal_plane_coils src/check_cal_plane_coils.cpp)
target_link_libraries(check_cal_plane_coils
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(test_trajreading src/test_trajreading.cpp)
target_link_libraries(test_trajreading
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(boostsandbox src/boostsandbox.cpp)
target_link_libraries(boostsandbox
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

add_executable(test_currentcompute_class src/test_currentcompute_class.cpp)
target_link_libraries(test_currentcompute_class
  ${catkin_LIBRARIES}
  plane_camera_magnet
)

