//Filter position using Kalman Filter 
//Position from filter.cpp -> /filterpose/xyFiltered


#include <ros/ros.h>
#include <plane_camera_magnet/xyFiltered.h>
#include "filter.h"
#include <Eigen/Geometry>
#include <visualization_msgs/Marker.h>

using namespace std;

static ros::Publisher odom_pub;
static KalmanFilter kf;
//static plane_camera_magnet::xyFiltered odom_msg; //fix later for usable output
static nav_msgs::Odometry odom_msg;


static void xyFiltered_callback(const plane_camera_magnet::xyFiltered& data)
{
    //initialize t_last_proc
    static ros::Time t_last_proc = data.header.stamp;

    // compute dt after inialization look
    double dt = (data.header.stamp - t_last_proc).toSec();
    t_last_proc = data.header.stamp; // update last time

    kf.processUpdate(dt);
    const KalmanFilter::Measurement_t meas(data.xyPixX[0],data.xyPixY[0]);

    
    if(data.xySize[0]!=0)
    {
        cout << "~detection~" << endl;
        static ros::Time t_last_meas = data.header.stamp;
        double meas_dt = (data.header.stamp - t_last_meas).toSec();
        t_last_meas = data.header.stamp;
        kf.measurementUpdate(meas, meas_dt);
    }

    const KalmanFilter::State_t state = kf.getState();
    const KalmanFilter::ProcessCov_t proc_noise = kf.getProcessNoise();
    // KF computation end

    //populate odom_msg to be published
    /* // For xyFiltered
    odom_msg.header.seq = data.header.seq;
    odom_msg.header.stamp = data.header.stamp;
    odom_msg.header.frame_id = data.header.frame_id;
    //odom_msg.xyPixX = std::vector<double> {state(0)};
    //odom_msg.xyPixY = std::vector<double> {state(1)};
    
    vector<double> outx (1.0,0.0);
    vector<double> outy (1.0,0.0);

    outx.at(0) = state(0);
    outy.at(0) = state(1);
    
    odom_msg.xyPixX = outx;
    odom_msg.xyPixY = outy;
    */

    // troubleshoot cout:
    cout << "proc noise" << proc_noise << endl;
    cout << "state" << state << endl;
    std::cout << "dt: " << dt << std::endl;
    std::cout << "filterpose: "<< data.xyPixX[0] << "," << data.xyPixY[0] << std::endl;
    std::cout << "xyPixXY: " << state(0) << ", " << state(1) << std::endl;
    std::cout << "Velocity: " << state(2) << ", " << state(3) << std::endl;
    std::cout << "==========" << std::endl;
    
    odom_msg.header.seq = data.header.seq;
    odom_msg.header.stamp = data.header.stamp;
    odom_msg.header.frame_id = data.header.frame_id; //camera id
    odom_msg.child_frame_id = "0"; //robot id?
    odom_msg.pose.pose.position.x = state(0)/100;
    odom_msg.pose.pose.position.y = state(1)/100;
    odom_msg.pose.pose.position.z = 0;
    odom_msg.twist.twist.linear.x = state(2);
    odom_msg.twist.twist.linear.y = state(3);
    odom_msg.twist.twist.linear.z = 0;
    for(int i = 0; i < 2; i++)
    {
      for(int j = 0; j < 2; j++)
      {
        odom_msg.pose.covariance[4*i+j] = proc_noise(i,j);
        odom_msg.twist.covariance[4*i+j] = proc_noise(2+i, 2+j);
      }
    }

/* //No orientation for magnet
    odom_msg.pose.pose.orientation.x = data.orientation.x;
    odom_msg.pose.pose.orientation.y = data.orientation.y;
    odom_msg.pose.pose.orientation.z = data.orientation.z;
    odom_msg.pose.pose.orientation.w = data.orientation.w;

    // Single step differentitation for angular velocity
    static Eigen::Matrix3d R_prev(Eigen::Matrix3d::Identity());
    Eigen::Matrix3d R(Eigen::Quaterniond(data.orientation.w, data.orientation.x, data.orientation.y, data.orientation.z));
    if(dt > 1e-6)
    {
      Eigen::Matrix3d R_dot = (R - R_prev)/dt;
      Eigen::Matrix3d w_hat = R_dot * R.transpose();

      odom_msg.twist.twist.angular.x = w_hat(2, 1);
      odom_msg.twist.twist.angular.y = w_hat(0, 2);
      odom_msg.twist.twist.angular.z = w_hat(1, 0);
    }
    R_prev = R;
    */
    odom_pub.publish(odom_msg);
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "kf_pose");

    ros::NodeHandle n("~");

    double max_accel;
    //set a max value
    n.param("max_accel",max_accel,5.0); //10pix/s^2

    double dt, camera_fps;
    n.param("camera_fps", camera_fps, 119.0);
    ROS_ASSERT(camera_fps>0.0);
    dt = 1/camera_fps;

    KalmanFilter::State_t proc_noise_diag;
    proc_noise_diag(0) = 0.5*max_accel*dt*dt;
    proc_noise_diag(1) = 0.5*max_accel*dt*dt;
    proc_noise_diag(2) = max_accel*dt;
    proc_noise_diag(3) = max_accel*dt;
    proc_noise_diag = proc_noise_diag.array().square();
    
    KalmanFilter::Measurement_t meas_noise_diag;
    meas_noise_diag(0) = 1e-4;
    meas_noise_diag(1) = 1e-4;
    meas_noise_diag = meas_noise_diag.array().square();
    kf.initialize(KalmanFilter::State_t::Zero(),
                  0.01*KalmanFilter::ProcessCov_t::Identity(),
                  proc_noise_diag.asDiagonal(),
                  meas_noise_diag.asDiagonal());
    
    ros::Subscriber filterpose_sub = n.subscribe("/filterpose/xyFiltered", 10, &xyFiltered_callback);
  
    //odom_pub = n.advertise<plane_camera_magnet::xyFiltered>("odom", 10);
    odom_pub = n.advertise<nav_msgs::Odometry>("odom", 10);

  
    ros::spin();
  
    return 0;
  
}